

2019-04-16
Inbetriebnahme des Raspberry pi erfolgreich.
Erste Probleme mit der Hdmi Skalierung des Bildschirms.
Dies konnte gelöst werden, indem overscanning in der system config unter /boot/config.txt
angeschaltet wurde.
Zum editieren der config datei waren root Rechte erforderlich, die man nur in der Linux Konsole
durch das Schlüsselwort "sudo" erlangt; dieses gibt man beim Öffnen der config datei mit in die
Konsole ein.

____________________________________________________________________

Test: An- und Abschalten des Bildschirms mit der command line

	1. Über die Linux Konsole - Hdmi Power Cut
Mit dem Befehl "vcgencmd display_power 0" wird die Stromversorgung des Hdmi Anschlusses
abgeschaltet, woraufhin der Bildschirm sich selbst nach einer Weile abschalten sollte.
Wenn man den Parameter 0 durch 1 ersetzt, wird der Hdmi Anschluss wieder mit Strom versorgt.

Das Kommando "tvservice --off" erbringt das selbe Ergebnis, jedoch kann der Bildschirm durch
"tvservice --preferred" nicht wie erwartet wieder angeschaltet werden.

Der Bildschirm wird anscheinend vom Xserver, welcher Teil des X Window Systems ist, verwaltet.
=> https://www.linux-community.de/ausgaben/linuxuser/2001/12/das-x-window-system/

Mit "xset" kann man über die command line auf die vom Xserver gesteuerte Hardware zugreifen,
dazu zählt u.a. das Display.
Mit "dpms" (Display Power Management Signaling) als Zusatz kann der Bildschirm wie gefordert
an und aus geschaltet werden.
Zusätzlich dazu kommt "force", um den Befehl ohne Zeitverzögerung auszuführen, und "on" bzw "off",
was in diesem Kontext selbsterklärend ist.

___________________________________________________________________

Entwicklung in Netbeans per remote PC

Um die Entwicklung einer Java Anwendung für das Raspberry Pi zu vereinfachen,
soll Netbeans verwendet werden.
Netbeans läuft jedoch auf dem Raspberry nur schlecht, deshalb wird dafür ein kräftiger
Desktop Computer verwendet.
Dieser wird per ssh remote Verbindung auf das Raspberry zugreifen.
Java Projekte werden auf dem PC geschrieben, kompiliert, dann auf das Raspberry geladen und 
dort ausgeführt.

Dazu wird zunächst in den Raspberry Systemeinstellungen SSH aktiviert.
Dann wird in Netbeans auf dem PC eine Remote Java Platform eingerichtet.
Dafür benötigt man:

1. Die IP Adresse des Raspberrys, welche per command line Befehl "ifconfig" abgerufen werden kann.
2. Einen Username mit zugehörigem Passwort des Raspberrys.
3. Den JRE Path des Raspberrys um JARs ausführen zu können.

Um ein Projekt dann von Netbeans aus remote auszuführen, muss man in den Projekt Eigenschaften
nur noch in den Run Optionen das Raspberry als Runtime Platform angeben.

Eine Schwierigkeit tut sich bei der remote Entwicklung auf:
Beim remote Ausführen eines builds von Netbeans aus auf dem Raspberry kann nicht auf X11
zugegriffen werden, sodass Anwendungen mit grafischer Oberfläche nicht gestartet werden können.
Von nun an verwendeter workaround ist das übertragen der jeweiligen JAR der Anwendung und direktes
starten über die command line des Raspberrys.

Für die grafische Oberfläche wird zunächst Java Swing verwendet, weil dies ohne weiteres auf dem 
Raspberry funktioniert.

__________________________________________________________________

2019-04-21

PostgreSQL

Um später Nutzerdaten speichern und abrufen zu können, wird PostgreSQL als Datenbank verwendet.
Diese soll durch JPA und Hibernate mit dem Java Projekt verbunden werden.

Zunächst wird postgreSQL auf dem Raspberry Linux system per Konsolenbefehl apt zusammen mit
dem pgadmin3 installiert.

Dann wird eine Datenbank erstellt, bei der die Namen von Datenbank, Schema, Sequenz, Tabellen
und Spalten (sowie der Spalten Wertetypen) von vornherein festgelegt sind.

In diesem Fall gibt es einen Benutzer mit Namen "postgres", Passwort "kuchen123", Datenbankname
"postgres", Schema "public", Tabelle "test", Spalten "id" (integer) und "name" (text).

___________________________________________________________________

Projektstruktur

Es wird ein master- oder root Projekt in Netbeans geben, das von einem Arbeits-PC auf das 
RaspberryPI als JAR deployed und dort per Konsole ausgeführt wird.

Unterprojekte werden dem Projekt als libraries hinzugefügt, z.B. als bereits kompilierte JARs.

Geplant sind:
1. Ein Hibernate Projekt, das Datenbankzugriff ermöglicht.
2. Eine grafische Oberfläche, die Informationen aus der Datenbank auf dem Bildschirm präsentiert.
3. Irgendwas, das eine Verbindung zwischen Raspberry und Smartphone erstellen kann.
4. Ein Display Controller, der Signale vom Bewegungsmelder verarbeitet.

Das Hibernate Projekt kann bereits Werte in Postgres Tabellen eintragen.
Dieses Projekt wird als JAR kompiliert dem master projekt zugeordnet.
Beim bauen der JAR ist es ABSOLUT WICHTIG in Netbeans "build with dependencies" auszuwählen,
und zur Assoziation die JAR mit den jeweiligen Dependencies zu verwenden. 
(es wird trotzdem eine zweite ohne dependencies gebaut)
Die maven dependencies innerhalb der JAR sind zum Ausführen der JAR an sich notwendig,
ohne die funktioniert nichts.

____________________________________________________________________

Tabellen in PostgreSQL

Wie bereits erwähnt müssen die Tabellen in postgres vordefiniert sein.
Dafür wird dem Projekt eine .sql Datei hinzugefügt, mit der schnell und zuverlässig die notwendigen Tabellen
erstellt werden können.
Die Entity Klassen des Projekts werden sich während der Entwicklung an dieser .sql Datei orientieren.

____________________________________________________________________

24.04.2019

Umstrukturierung des HibernateTest4 Projekts

- Umbenannt in EyDashDatabaseManager.
- Besitzt nun eine SQL Datei, mit der die Datenbank sofort auf das Projekt passend eingerichtet werden kann,
	ohne extra Arbeit.
- Besitzt nun Entity Klassen für alle notwendigen Tabellen.
- Die passenden Spalten und Datentypen müssen im Laufe des Projekts noch bestimmt werden.
	-> SQL Datei und Entity Klassen müssen dann darauf angepasst werden.
- Alle Klassen wurden in passend benannten packages im Projekt sortiert.
	-> persistence.xml muss manuell auf Umbenennungen/Verschiebung angepasst werden.
	-> Main class muss nach Umbenennung manuell neu in den Project Properties festgelegt werden.
- Output jar Name wurde geändert
	-> In den Project Properties unter General müssen Einträge für 
		Group Id, Artifact Id und packaging manuell geändert werden.
	-> Wert im <persistence-unit> tag der persistence.xml muss manuell geändert werden.
	-> Argument für createEntityManagerFactory() muss manuell geändert werden.
- Klasse DatabaseManager eingeführt, der statische Methoden bereitstellt, 
	mit denen schnell SQL Einträge gemacht werden können.

____________________________________________________________________

25.04.2019

PIR Bewegungssensor

- Erster Test nach 2 Stunden erfolgreich.
-> http://www.netzmafia.de/skripten/hardware/RasPi/Projekt-PIR/index.html
	Führt zum ersten positiven Testergebnis; eine Handbewegung wird definitiv erkannt.
- Python script wird zum Test verwendet
- Einstellung der Empfindlichkeit und Zeitintervall durch drehen an den jeweiligen orangenen Drehmodulen, die am Chip des Sensors befestigt sind
	=> Das Verhalten des Sensors wird währenddessen im Python script beobachtet, bis ein Intervall von ca. 1 Sekunde 			erreicht ist, wobei der Sensor von einer normalen Handbewegung ausgelöst wird.

- Nächster Schritt sind Tests in Java

____________________________________________________________________

26.04.2019

PIR Bewegungssensor und Java

Um die Pins ansteuern zu können, mit denen der Bewegungssensor mit dem Raspberry verbunden ist,
wird die Java Bibliothek Pi4j auf dem Entwicklungs-PC verwendet.
Hierfür wird ein neues Maven Projekt erstellt, worin Pi4j einfach als dependency importiert werden kann.
Dieses Projekt, genannt EyDashDisplayController, wird wie der DatabaseManager als kompilierte JAR dem Hauptprojekt hinzugefügt,
und zum Testen remote auf dem Raspberry ausgeführt.
Um den DisplayController separat von anderem Code ausführen zu können, wird im Hauptprojekt eine eigene TestMain Klasse erstellt, welche z.B. unter den Run-Optionen des Hauptprojekts vor dem Ausführen ausgewählt werden kann.
Dadurch wird dann nur der Code in der TestMain ausgeführt, sodass z.B. keine Probleme mit dem X11 Display auftreten, wie es bei der Verwendung von Swing der Fall ist.
=> Entwicklung wird angenehmer

Der Bewegungssensor ist wie folgt mit dem Raspberry verbunden:
- Vcc (5V) Pin zur Stromversorgung mit dem Raspberry Pin 2
- GND (Masse) mit Pin 6
- Dout (Digital out) zur Datenübertragung mit Pin 7, auch GPIO 4

Bei erkannter Bewegung steht Dout für das gestern eingestellte Zeitintervall auf 3.3V, 
wenn danach keine Bewegung erkannt wird, fließt durch Dout kein Strom mehr.
Digital können diese Zustände als 1 und 0 ausgedrückt werden.

Folgend soll also GPIO 4 mit Java ausgelesen werden.
Pi4j verwendet ein bestimmtes Pin mapping:
https://pi4j.com/1.2/images/j8header-b-plus.png

Also wird nun im DisplayController Projekt eine Klasse angelegt, die vom Pin 7 Daten erhalten soll.

Die Ausführung dieser Klasse scheitert jedoch bereits daran, dass die Pi4j dependencies nicht mit der JAR exportiert werden können, auch nicht nach vielfachen Versuchen das Problem zu lösen.
Stattdessen wird die durch Maven bereits heruntergeladene Pi4j JAR dem Hauptprojekt direkt hinzugefügt und die DisplayController Klasse wird hier ausgeführt, was auch funktioniert.
Das Maven Projekt des DisplayControllers an sich wird hiermit geschlossen.

Das Programm ist zwar jetzt ausführbar, die Pins liefern bisher jedoch nur 1 als input.
Bisher fehlt jedoch auch noch wiringPi auf dem Raspberry, was eine low level Bibliothek für das Manipulieren von Pins ist.
WiringPi wird schnell per apt-get installiert, und dann wird code zum erneuten Test des Sensors von einem
vorhandenen Github repo genommen, welches sich mit dem PIR Bewegungssensor beschäftigt.

(https://github.com/agilerules/IOT/tree/master/iot-pi4j-sensors)

Ergebnis: Es funzt!

Um die Prozessorauslastung des Raspberrys zu reduzieren, wird noch das Thread.sleep(500) in der Schleife aktiviert.
Durchscnittliche Auslastung von 25% -> 0%.

____________________________________________________________________

27.04.2019

Test Displaysteuerung mit Bewegungssensor

Ablauf:
Das Projekt wird am Entwicklungs-PC kompiliert, an das Raspberry als jar gesendet, dort ausgeführt und die Konsolenausgaben werden an den Entwicklungs-PC zurückgegeben.
Der gesendete Code sieht vor, beim Auslösen des Bewegungsmelders den Bildschirm abzuschalten.

Der erste Test zeigt, dass der oben beschriebene Ablauf nicht funktioniert.
Grund dafür ist wahrscheinlich, dass der Befehl zum Abschalten des Displays im Programm auf den Xserver zugreifen will, was remote bisher nicht funktioniert. (Runtime.getRuntime().exec("xset dpms force standby");)

Beim nächsten Versuch wird die exportierte JAR beim Raspberry direkt über die command line gestartet.
Dieser Versuch scheitert wieder, weil der Zugriff auf wiringPi versagt wird (was jedoch darauf hindeutet, dass wiringPi zum Ausführen des Projekts notwendig ist).

Nun wird die JAR noch mal per command line ausgeführt, diesmal jedoch mit root Rechten.
Das Ausführen funktioniert, und der Display schaltet sich beim Auslösen des Bewegungsmelders aus.

Nächster Test ist das Anschalten.
Dafür wird der Display durch das Programm bei Programmstart auf standby gesetzt, dann soll er durch den Bewegungssensor angeschaltet werden.
Dies funktioniert nach einigem Schrauben an der Sensitivität des Sensors.

____________________________________________________________________

Bug: Sensor erkennt eine Bewegung genau alle 60 Sekunden

Versucht wird von Listener auf Poll zu wechseln, Poll funktioniert jedoch gar nicht.
Änderung Dout von pin 4 auf pin 16, dann jedoch funktioniert gar nichts mehr.

Nachforschung und Test ergibt, dass das Wlan des Raspberrys an dem Fehlverhalten Schuld trägt.
Bug verschwindet, sobald das Wlan ausgeschaltet wird.
Der Abstand des PIR Sensors zum Raspberry wird mit zusätzlichen Kabeln auf einen halben Meter erweitert.
Test ergibt dass das die Lösung des Problems ist.

____________________________________________________________________

Raspberry schaltet Display nach idle time selbstständig aus

Das möchten wir natürlich nicht.
Zuerst wird per apt-get der xscreensaver installiert. Dieser wird dann deaktiviert, sodass der Display sich nicht mehr selbst abschaltet.
Dann wird eine Abschaltfunktion in das eigene Programm eingebaut, um die Zeit bis zum Abschalten genau steuern zu können.

____________________________________________________________________

Offene while Schleife und Performance

Da die Klasse DisplayController eine offene while Schleife verwendet, die ständig ressourcen beanspruchen kann, erweitert die Klasse jetzt Thread.
Somit wird bei Initialisierung des DisplayControllers ein neuer Thread erstellt, der dann direkt gestartet wird.
Dieser eigenständig laufende Thread beeinflusst dann nicht mehr andere Threads wie z.B. den für die grafische Oberfläche.
(Ist für diese Raspberry Anwendung vielleicht overkill, aber ich will das Programm anständig und nach Gewohnheit programmieren)

____________________________________________________________________

02.05.2019

Verbindungsaufbau zwischen Raspberry und Smartphone mittels Java

Zuerst wird nach einer vorhandenen Java Bibliothek gesucht, mit der auf Linux Bluetooth zugegriffen werden kann.
-> lbt4j, last commit 2017, sollte also aktuell genug sein.

Für diese Bibliothek muss außerdem BlueZ auf dem neusten Stand sein.
(Verwendetes Tutorial: https://scribles.net/updating-bluez-on-raspberry-pi-5-43-to-5-48/)

lbt4j stellt sich als schwer zu importieren heraus, deswegen wird nach einigen Versuchen versucht, mit einer anderen Bibliothek fortzufahren.
Neue Bibliothek: tinyb

Zuerst wird jedoch nun die Verwendung von BlueZ auf dem Raspberry getestet, was die Grundlage jeder Java Bibliothek ist und deshalb funktionieren muss.
Testweise wird versucht, eine Verbindung mit dem eigenen Smartphone aufzustellen.
Dies wird erfolgreich erreicht, allein über command line Eingaben für BlueZ.

04.05.2019

tinyb stellt sich auch als schwer zu verwenden heraus, denn anscheinend wird zum Kompilieren der java projekte ein externes Programm benötigt, jedoch soll das Kompilieren in NetBeans stattfinden.

Stattdessen wird die Bibliothek BlueCove getestet.
Diese kann im Gegensatz zu den vorigen Versuchen recht leicht in NetBeans eingebunden werden, das Kompilieren funktioniert sofort fehlerfrei, die JAR kann remote ohne exception auf dem Raspberry ausgeführt werden und es wird dabei sogar ein Bluetooth-Gerät (eigenes Smartphone) gefunden.

06.05.2019

http://www.aviyehuda.com/blog/2010/01/08/connecting-to-bluetooth-devices-with-java/
-> Verbindung über Java aufbauen

Raspberry verfügt über keine Bluetooth services und kann daher nicht mit dem smartphone verbunden werden.
Installiere obex push service zum Testen.
(https://www.raspberrypi.org/forums/viewtopic.php?t=146328)

Außerdem wird ein Verbindungsprofil auf dem Raspberry angelegt, damit es mit dem Smartphone gepaired werden kann.
(https://www.raspberrypi.org/forums/viewtopic.php?p=947185#p947185)


____________________________________________________________________

07.05.2019

Umplanung

Die bisher erfolgreich implementierte Erkennung nahegelegener Bluetooth Geräte wird für das Projekt ausreichen.
Das Aufbauen einer direkten Verbindung wird nicht notwendig sein.
Neue Benutzer des eyDash werden am Raspberry über eine grafische Benutzeroberfläche hinzugefügt werden.
Diese fordert die Eingabe des Bluetooth Namens oder der Bluetooth Adresse eines Smartphones.
Ist mindestens eine der beiden Angaben gemacht, wird daraufhin im Umfeld nach einem Bluetooth Gerät gesucht, das der/den Angabe(n) entspricht.
Ist die Suche erfolgreich, wird die jeweils evtl. fehlende Angabe vom gefundenen Gerät abgerufen (z.B. wenn nur der Name angegeben wurde, so wird die Adresse abgerufen).
Somit ist das gefundene Bluetooth Gerät später eindeutig wiedererkennbar.
Dann werden Bluetooth Name & Adresse, sowie alle anderen am Raspberry eingegebenen Angaben zum Benutzer in der Datenbank gespeichert.
=> Ein neuer Benutzer ist angelegt.

Zu den Angaben sollen auch die nötigen Daten zum Zugriff auf z.B. MS Outlook gehören.
Darauf greift das Raspberry dann über die eigene Internetverbindung zu, sobald das passende Bluetooth Gerät im Umfeld erkannt 
worden ist.
Die Termine sollen im Hintergrund geladen werden, sofort nach der Bluetooth Erkennung, unabhängig davon ob der Display bereits
angeschaltet wurde durch Bewegungserkennung.

____________________________________________________________________

Test Bluetooth

Die Klasse ConnectionManager wird zu BluetoothDeviceFinder umbenannt, um ihre Rolle klar zu machen.
Diese Klasse implementiert jetzt Runnable, damit sie einfach einem in einer anderen Klasse erstellten Thread übergeben werden kann.
Die Klasse run enthält eine while-Schleife, die per boolean an- und abgeschaltet werden kann.
Den boolean kann man mit setter und getter manipulieren.
Die while-Schleife ruft immer wieder die bluetooth deviceDiscovery auf und gibt jedes Mal Datum und Zeit des Versuchs aus.

Getestet wird, wie häufig die Bluetooth Device Discovery durchgeführt wird und auf welche Reichweite Geräte erkannt werden.

Ergebnis zum Testintervall:
DeviceDiscovery wird alle 10.5 Sekunden ein Mal vollständig ausgeführt.

Ergebnis zur Reichweite:
Erkennung funktioniert über geschlossene Türen hinweg innerhalb der Wohnung.
Funktioniert nicht mehr bei Verlassen der Wohnung.

ConcurrentModificationException
Die Klasse BluetoothDeviceFinder besitzt jetzt zwei Listen für die Speicherung der gefundenen Geräte.
Eine Liste wird verwendet, um stets neu beschrieben zu werden, bei jedem Suchdurchlauf.
Die andere Liste kopiert die erste Liste immer direkt bevor der Inhalt der ersten wieder gelöscht wird.
Dadurch kann jederzeit sicher auf die zweite Liste von außerhalb des Threads zugegriffen werden, da diese nie aktiv beschrieben wird, sondern bei jedem Durchlauf bloß eine neue Instanz von ArrayList mit der ersten Liste als Argument erzeugt.
Diese Vorgehensweise verhindert ConcurrentModificationExceptions, wie sie bei vorigen Tests aufgetreten sind.

____________________________________________________________________

Outlook

Die Termine sollen von MS Outlook abgerufen werden.
Dazu wird ein Outlook Account für dieses Projekt erstellt.

Adresse:
eyDash@outlook.de

Passwort:
kuchen123

____________________________________________________________________

13.05.2019

https://github.com/cbales/onenote-content-push-java-graph-sample
Versuche Verbindung zu Outlook aufzubauen.

MS graph sdk für java als JAR gedownloaded.

MS Azure Account ist notwendig, jedoch nicht ohne weiteres kostenfrei.
Outlook wird eingestampft.

____________________________________________________________________

Verwendung von Google statt Microsaft Diensten

Neues Google Konto:

eydashprojekt@gmail.com
kuchen123
