

2019-04-16
Inbetriebnahme des Raspberry pi erfolgreich.
Erste Probleme mit der Hdmi Skalierung des Bildschirms.
Dies konnte gelöst werden, indem overscanning in der system config unter /boot/config.txt
angeschaltet wurde.
Zum editieren der config datei waren root Rechte erforderlich, die man nur in der Linux Konsole
durch das Schlüsselwort "sudo" erlangt; dieses gibt man beim Öffnen der config datei mit in die
Konsole ein.

____________________________________________________________________

Test: An- und Auschalten des Bildschirms vom Raspberry Pi aus

	1. Über die Linux Konsole - Hdmi Power Cut
Mit dem Befehl "vcgencmd display_power 0" wird die Stromversorgung des Hdmi Anschlusses
abgeschaltet, woraufhin der Bildschirm sich selbst nach einer Weile abschalten sollte.
Wenn man den Parameter 0 durch 1 ersetzt, wird der Hdmi Anschluss wieder mit Strom versorgt.

Das Kommando "tvservice --off" erbringt das selbe Ergebnis, jedoch kann der Bildschirm durch
"tvservice --preferred" nicht wie erwartet wieder angeschaltet werden.

Der Bildschirm wird anscheinend vom Xserver, welcher Teil des X Window Systems ist, verwaltet.
=> https://www.linux-community.de/ausgaben/linuxuser/2001/12/das-x-window-system/

Mit "xset" kann man über die command line auf die vom Xserver gesteuerte Hardware zugreifen,
dazu zählt u.a. das Display.
Mit "dpms" (Display Power Management Signaling) als Zusatz kann der Bildschirm wie gefordert
an und aus geschaltet werden.
Zusätzlich dazu kommt "force", um den Befehl ohne Zeitverzögerung auszuführen, und "on" bzw "off",
was in diesem Kontext selbsterklärend ist.

___________________________________________________________________

Entwicklung in Netbeans per remote PC

Um die Entwicklung einer Java Anwendung für das Raspberry Pi zu vereinfachen,
soll Netbeans verwendet werden.
Netbeans läuft jedoch auf dem Raspberry nur schlecht, deshalb wird dafür ein kräftiger
Desktop Computer verwendet.
Dieser wird per ssh remote Verbindung auf das Raspberry zugreifen.
Java Projekte werden auf dem PC geschrieben, kompiliert, dann auf das Raspberry geladen und 
dort ausgeführt.

Dazu wird zunächst in den Raspberry Systemeinstellungen SSH aktiviert.
Dann wird in Netbeans auf dem PC eine Remote Java Platform eingerichtet.
Dafür benötigt man:

1. Die IP Adresse des Raspberrys, welche per command line Befehl "ifconfig" abgerufen werden kann.
2. Einen Username mit zugehörigem Passwort des Raspberrys.
3. Den JRE Path des Raspberrys um JARs ausführen zu können.

Um ein Projekt dann von Netbeans aus remote auszuführen, muss man in den Projekt Eigenschaften
nur noch in den Run Optionen das Raspberry als Runtime Platform angeben.

Eine Schwierigkeit tut sich bei der remote Entwicklung auf:
Beim remote Ausführen eines builds von Netbeans aus auf dem Raspberry kann nicht auf X11
zugegriffen werden, sodass Anwendungen mit grafischer Oberfläche nicht gestartet werden können.
Von nun an verwendeter workaround ist das übertragen der jeweiligen JAR der Anwendung und direktes
starten über die command line des Raspberrys.

Für die grafische Oberfläche wird zunächst Java Swing verwendet, weil dies ohne weiteres auf dem 
Raspberry funktioniert.

__________________________________________________________________

2019-04-21

PostgreSQL

Um später Nutzerdaten speichern und abrufen zu können, wird PostgreSQL als Datenbank verwendet.
Diese soll durch JPA und Hibernate mit dem Java Projekt verbunden werden.

Zunächst wird postgreSQL auf dem Raspberry Linux system per Konsolenbefehl apt zusammen mit
dem pgadmin3 installiert.

Dann wird eine Datenbank erstellt, bei der die Namen von Datenbank, Schema, Sequenz, Tabellen
und Spalten (sowie der Spalten Wertetypen) von vornherein festgelegt sind.

In diesem Fall gibt es einen Benutzer mit Namen "postgres", Passwort "kuchen123", Datenbankname
"postgres", Schema "public", Tabelle "test", Spalten "id" (integer) und "name" (text).

___________________________________________________________________

Projektstruktur

Es wird ein master- oder root Projekt in Netbeans geben, das von einem Arbeits-PC auf das 
RaspberryPI als JAR deployed und dort per Konsole ausgeführt wird.

Unterprojekte werden dem Projekt als libraries hinzugefügt, z.B. als bereits kompilierte JARs.

Geplant sind:
1. Ein Hibernate Projekt, das Datenbankzugriff ermöglicht.
2. Eine grafische Oberfläche, die Informationen aus der Datenbank auf dem Bildschirm präsentiert.
3. Irgendwas, das eine Verbindung zwischen Raspberry und Smartphone erstellen kann.
4. Ein Display Controller, der Signale vom Bewegungsmelder verarbeitet.

Das Hibernate Projekt kann bereits Werte in Postgres Tabellen eintragen.
Dieses Projekt wird als JAR kompiliert dem master projekt zugeordnet.
Beim bauen der JAR ist es ABSOLUT WICHTIG in Netbeans "build with dependencies" auszuwählen,
und zur Assoziation die JAR mit den jeweiligen Dependencies zu verwenden. 
(es wird trotzdem eine zweite ohne dependencies gebaut)
Die maven dependencies innerhalb der JAR sind zum Ausführen der JAR an sich notwendig,
ohne die funktioniert nichts.

____________________________________________________________________

Tabellen in PostgreSQL

Wie bereits erwähnt müssen die Tabellen in postgres vordefiniert sein.
Dafür wird dem Projekt eine .sql Datei hinzugefügt, mit der schnell und zuverlässig die notwendigen Tabellen
erstellt werden können.
Die Entity Klassen des Projekts werden sich während der Entwicklung an dieser .sql Datei orientieren.

____________________________________________________________________

24.04.2019

Umstrukturierung des HibernateTest4 Projekts

- Umbenannt in EyDashDatabaseManager.
- Besitzt nun eine SQL Datei, mit der die Datenbank sofort auf das Projekt passend eingerichtet werden kann,
	ohne extra Arbeit.
- Besitzt nun Entity Klassen für alle notwendigen Tabellen.
- Die passenden Spalten und Datentypen müssen im Laufe des Projekts noch bestimmt werden.
	-> SQL Datei und Entity Klassen müssen dann darauf angepasst werden.
- Alle Klassen wurden in passend benannten packages im Projekt sortiert.
	-> persistence.xml muss manuell auf Umbenennungen/Verschiebung angepasst werden.
	-> Main class muss nach Umbenennung manuell neu in den Project Properties festgelegt werden.
- Output jar Name wurde geändert
	-> In den Project Properties unter General müssen Einträge für 
		Group Id, Artifact Id und packaging manuell geändert werden.
	-> Wert im <persistence-unit> tag der persistence.xml muss manuell geändert werden.
	-> Argument für createEntityManagerFactory() muss manuell geändert werden.
- Klasse DatabaseManager eingeführt, der statische Methoden bereitstellt, 
	mit denen schnell SQL Einträge gemacht werden können.

____________________________________________________________________

25.04.2019

PIR Bewegungssensor

- Erster Test nach 2 Stunden erfolgreich.
-> http://www.netzmafia.de/skripten/hardware/RasPi/Projekt-PIR/index.html
	Führt zum ersten positiven Testergebnis; eine Handbewegung wird definitiv erkannt.
- Python script wird zum Test verwendet
- Einstellung der Empfindlichkeit und Zeitintervall durch drehen an den jeweiligen orangenen Drehmodulen, die am Chip des Sensors befestigt sind
	=> Das Verhalten des Sensors wird währenddessen im Python script beobachtet, bis ein Intervall von ca. 1 Sekunde 			erreicht ist, wobei der Sensor von einer normalen Handbewegung ausgelöst wird.

- Nächster Schritt sind Tests in Java

____________________________________________________________________

26.04.2019

PIR Bewegungssensor und Java

Um die Pins ansteuern zu können, mit denen der Bewegungssensor mit dem Raspberry verbunden ist,
wird die Java Bibliothek Pi4j auf dem Entwicklungs-PC verwendet.
Hierfür wird ein neues Maven Projekt erstellt, worin Pi4j einfach als dependency importiert werden kann.
Dieses Projekt, genannt EyDashDisplayController, wird wie der DatabaseManager als kompilierte JAR dem Hauptprojekt hinzugefügt,
und zum Testen remote auf dem Raspberry ausgeführt.
Um den DisplayController separat von anderem Code ausführen zu können, wird im Hauptprojekt eine eigene TestMain Klasse erstellt, welche z.B. unter den Run-Optionen des Hauptprojekts vor dem Ausführen ausgewählt werden kann.
Dadurch wird dann nur der Code in der TestMain ausgeführt, sodass z.B. keine Probleme mit dem X11 Display auftreten, wie es bei der Verwendung von Swing der Fall ist.
=> Entwicklung wird angenehmer

Der Bewegungssensor ist wie folgt mit dem Raspberry verbunden:
- Vcc (5V) Pin zur Stromversorgung mit dem Raspberry Pin 2
- GND (Masse) mit Pin 6
- Dout (Digital out) zur Datenübertragung mit Pin 7, auch GPIO 4

Bei erkannter Bewegung steht Dout für das gestern eingestellte Zeitintervall auf 3.3V, 
wenn danach keine Bewegung erkannt wird, fließt durch Dout kein Strom mehr.
Digital können diese Zustände als 1 und 0 ausgedrückt werden.

Folgend soll also GPIO 4 mit Java ausgelesen werden.
Pi4j verwendet ein bestimmtes Pin mapping:
https://pi4j.com/1.2/images/j8header-b-plus.png

Also wird nun im DisplayController Projekt eine Klasse angelegt, die vom Pin 7 Daten erhalten soll.

Die Ausführung dieser Klasse scheitert jedoch bereits daran, dass die Pi4j dependencies nicht mit der JAR exportiert werden können, auch nicht nach vielfachen Versuchen das Problem zu lösen.
Stattdessen wird die durch Maven bereits heruntergeladene Pi4j JAR dem Hauptprojekt direkt hinzugefügt und die DisplayController Klasse wird hier ausgeführt, was auch funktioniert.
Das Maven Projekt des DisplayControllers an sich wird hiermit geschlossen.

Das Programm ist zwar jetzt ausführbar, die Pins liefern bisher jedoch nur 1 als input.
Bisher fehlt jedoch auch noch wiringPi auf dem Raspberry, was eine low level Bibliothek für das Manipulieren von Pins ist.
WiringPi wird schnell per apt-get installiert, und dann wird code zum erneuten Test des Sensors von einem
vorhandenen Github repo genommen, welches sich mit dem PIR Bewegungssensor beschäftigt.

(https://github.com/agilerules/IOT/tree/master/iot-pi4j-sensors)

Ergebnis: Es funzt!

Um die Prozessorauslastung des Raspberrys zu reduzieren, wird noch das Thread.sleep(500) in der Schleife aktiviert.
Durchscnittliche Auslastung von 25% -> 0%.
